#!/bin/sh
# Start it with sh... \
  exec tclsh8.4 "$0" "$@"

#
# The following is the password with which the line is encrypted using the blowfish
# algorithm.
#
set password "Sample fido password...change this."
set fido_size 512

#
# Load the shared object.
#
set SLE [info sharedlibextension]
if [ catch { load ./libcdbtcl$SLE } result ] {
  puts "Could not load ./libcdbtcl$SLE: $result"
  exit 1
}

#
# Check the sha1 signature of this file.
#
if [ catch { source ./fido.sha1.tcl } result ] {
  puts "Could not source fido.sha1.tcl: $result"
  exit 1
}
set this_fidoSha1 [ sha1sum fido ]
if { $fidoSha1 != $this_fidoSha1 } {
  puts "WARNING: sha1 signature for fido.tcl doesn't match!"
  exit 1
}
set this_cdbtclSha1 [ sha1sum libcdbtcl.so ]
if { $cdbtclSha1 != $this_cdbtclSha1 } {
  puts "WARNING: sha1 signagure for libcdbtcl.so doesn't match!"
  exit 1
}

#
# Calculate the number of lines in a file.
#
proc line_num { file } {
  global WC
  set str [eval exec $WC -l $file]
  scan "$str" "%d %s" num junk
  return $num
}

#
# fileModeType (mode, type)
#
# Returns a string of the type -rwxrwxrwx (similar to that returned by ls -l)
# for the file whose mode is mode (given by stat(mode)) and whose type is type
# given by stat(type).

proc fileModeType { mode type } {
  #
  # OK, we are going to look at the mode value and do some bit-flipping
  # to determine what type of file/directory this is.  What follows are
  # masks (in hex) and what value they return when applied against the
  # mode.
  # 
  #                                    User    Grp     Other
  #             ..._ _ _ _ _ _ _ _ _ | _ _ _ | _ _ _ | _ _ _
  #
  # 0xfffffe &                       |                      |
  # 0x0001                                                | |
  # 0x0002                                              | |
  # 0x0004                                            | |
  # 0x0008                                        | |
  # 0x0010                                      | |
  # 0x0020                                    | |
  # 0x0040                                | |
  # 0x0080                              | |
  # 0x0100                            | |
  # 0x800   &   Gives whether SUID
  # 0x400   &   Gives whether GUID
  # 0x200   &   Gives whether Sticky bit on
  #
  # Then, I can use 'file type' and 'file attributes' to get the rest of
  # the info I need.
  # 

  #
  # Get the "other" information
  #
  set mask [ expr $mode & 0x0001 ]
  if { $mask == 1 } {
    set o_x x
  } else {
    set o_x -
  }
  set mask [ expr $mode & 0x0002 ]
  if { $mask == 2 } {
    set o_w w
  } else {
    set o_w -
  }
  set mask [ expr $mode & 0x0004 ]
  if { $mask == 4 } {
    set o_r r
  } else {
    set o_r -
  }
  #
  # check for sticky bit
  #
  set mask [ expr $mode & 0x0200 ]
  if { $mask == 512 } {
    if { $o_x == "x" } {
      set o_x t
    } else {
      set o_x T
    }
  }
  #
  # Group information
  #
  set mask [ expr $mode & 0x0008 ]
  if { $mask == 8 } {
    set g_x x
  } else {
    set g_x -
  }
  set mask [ expr $mode & 0x0010 ]
  if { $mask == 16 } {
    set g_w w
  } else {
    set g_w -
  }
  set mask [ expr $mode & 0x0020 ]
  if { $mask == 32 } {
    set g_r r
  } else {
    set g_r -
  }
  #
  # Check for guid
  #
  set mask [ expr $mode & 0x0400 ]
  if { $mask == 1024 } {
    if { $g_x == "x" } {
      set g_x s
    } else {
      set g_x S
    }
  }
  #
  # User information
  #
  set mask [ expr $mode & 0x0040 ]
  if { $mask == 64 } {
    set u_x x
  } else {
    set u_x -
  }
  set mask [ expr $mode & 0x0080 ]
  if { $mask == 128 } {
    set u_w w
  } else {
    set u_w -
  }
  set mask [ expr $mode & 0x0100 ]
  if { $mask == 256 } {
    set u_r r
  } else {
    set u_r -
  }
  #
  # Check for suid
  #
  set mask [ expr $mode & 0x0800 ]
  if { $mask == 2048 } {
    if { $u_x == "x" } {
      set u_x s
    } else {
      set u_x S
    }
  }
  #
  # See if it is a directory, regular file or some other kind of file
  #
  switch -exact -- $type {
    file { set f_d - }
    directory { set f_d d }
    characterSpecial { set f_d c }
    blockSpecial { set f_d b }
    fifo { set f_d f }
    link { set f_d l }
    socket { set f_d s }
    default { set f_d ? }
  }
  set mode_str [ format "%s%s%s%s%s%s%s%s%s%s" $f_d $u_r $u_w $u_x $g_r $g_w $g_x $o_r $o_w $o_x ]
  return $mode_str
}

#
# Load the configuration file for this architecture.  Change yours to meet your
# needs.
#
set OS_TYPE [ eval exec uname ]
if { $OS_TYPE == "SunOS" } {
  puts "Loading fido.solaris.config..."
  source fido.solaris.config
} elseif { $OS_TYPE == "Linux" } {
  puts "Loading fido.linux.config..."
  source fido.linux.config
} else {
  puts "Loading fido.default.config..."
  source fido.default.config
}


#
# Set port and server based on command-line arguments:
#
# fido (without arguments) -> PORT=default, SERVER=default (set in config).
# fido one (one argument) -> PORT=one, SERVER=default (set in config).
# fido one two (two arguments) -> PORT=one, SERVER=two (nothing from config).
#
if { $argc == 0 } {
  # Defaults
  set PORT $default_port
  set SERVER $default_server
}

if { $argc == 1 } {
  # Get port from the command-line
  set PORT [ lindex $argv 0 ]
  set SERVER $default_server
}

if { $argc == 2 } {
  # Get both from the command-line
  set PORT [ lindex $argv 0 ]
  set SERVER [ lindex $argv 1 ]
}

set clock1 [ dbtime ]

#
# Traverse through a list of directories, creating a file list from the
# directories.  This file list will be used as a basis for integrity checks
# of individual files.
#

puts stderr "Grabbing a list of files to process..."

#
# Open $FIDO_DIR for reading.  $FIDO_DIR is just a list of directories
# to search through.
#
if [ catch { set file [ open $FIDO_DIR r ] } error ] {
  puts stderr "Could not open $FIDO_DIR: $error"
  return 1
}

#
# Get each line into an element of dirList to make for easy list processing.
#
if [ catch { set dirList [ split [ read $file ] "\n" ] } ] {
  puts stderr "Could not get the contents of $FIDO_DIR"
  return 1
}

catch { close $file }

#
# Remove the tmp file if it exists - ignore the results of this.
#
file delete $FIDO_TMP

#
# Traverse the directories and generate a list of files to process.
#
foreach dir $dirList {
  if { $dir != "" } {
    if [ catch { eval exec $FIND $dir -xdev  >> $FIDO_TMP } \
	   error ] {
      puts stderr "Could not run find on $dir: $error"
    }
  }
}

#
# If there is a list of individual files to process, get that list and append
# it to the tmpFileList.
#
if [file exists $FIDO_FIL] {
  catch {eval exec $CAT $FIDO_TMP $FIDO_FIL > $FIDO_TMP2}
} else {
  catch {eval exec $MV $FIDO_TMP $FIDO_TMP2}
}
set numl [line_num $FIDO_TMP2]
catch {eval exec ./rough_sort $numl 256 $FIDO_TMP2 > $PROC_DIR}
file delete -force $FIDO_TMP
file delete -force $FIDO_TMP2

puts stderr "Grabbing a list of excludes to process..."

if [file exists $FIDO_EXCL] {
  if [ catch { set excludes [ open $FIDO_EXCL r ] } error ] {
    puts stderr "Could not open $FIDO_EXCL: $error"
    dbexit
    exit 1
  }
  set exclude_list [ split [ read $excludes ] "\n" ]
  catch {close $excludes}
  foreach dir $exclude_list {
    if { $dir != "" } {
      if [ catch { eval exec $FIND $dir -xdev  >> $FIDO_TMP } \
	     error ] {
        puts stderr "***Error: eval exec $FIND $dir -xdev: $error"
      }
    }
  }
}
set numl [line_num $FIDO_TMP]
catch {eval exec ./rough_sort $numl 256 $FIDO_TMP > $PROC_EXCL}
file delete -force $FIDO_TMP

#
# Now, run fido_proc to process the excludes.
#
set numl [line_num $PROC_DIR]
catch {eval exec ./fido_proc $numl $PROC_DIR $PROC_EXCL $PROC_OUT} error
if {$error != ""} {
  puts "\n***Warning: error value from fido_proc: $error"
}

#
# open the socket and grab the host name
#
set sock [socket $SERVER $PORT]

if [catch {set hostnm [eval exec $UNAME -n]} error] {
  puts stderr "Could not get hostname: $error"
  return 1
}

puts stderr "Sending hostname $hostnm"
puts stderr ""

if [catch {set host_db [open /tmp/fido_$hostnm.$dt w 0600]} result] {
  puts stderr "***Warning: could not open /tmp/fido_$hostnm.$dt w 0600: $result"
  set host_db stdout
}

set counter 0
set time_stats 0.0
if [ catch { set file [ open $PROC_OUT r ] } error ] {
  puts stderr "***Error: Could not open $PROC_OUT: $error"
    return 1
}
  
#
# Get each line into an element of dirList to make for easy list processing.
#
if [ catch { set fileList [ split [ read $file ] "\n" ] } ] {
  puts stderr "Could not get the contents of $PROC_OUT"
  return 1
}

catch { close $file }

#
# Remove the tmp files.
#
file delete $PROC_DIR
file delete $PROC_EXCL
file delete $PROC_OUT
      
#
# Traverse through and process each file.
#
foreach item $fileList {
  if { $item != "" } {
    #
    # If we can't fstat it, go on.
    #
    if [catch {file stat $item fstat} result] {
      puts stderr "***Warning: could not stat and therefore skipping $item: $result"
      continue
    }
    #
    # If it's a fifo, socket, characterSpecial or blockSpecial, go on.
    #
    if {$fstat(type) == "fifo"} {
      puts stderr "***Warning: $item is a fifo...skipping"
      continue
    }
    if {$fstat(type) == "socket"} {
      puts stderr "***Warning: $item is a socket...skipping"
      continue
    }
    if {$fstat(type) == "characterSpecial"} {
      puts stderr "***Warning: $item is a character special device...skipping"
      continue
    }
    if {$fstat(type) == "blockSpecial"} {
      puts stderr "***Warning: $item is a block special device...skipping"
      continue
    }
    #
    # If we can't md5, sha1 or rmd160 the file, go on.
    #
    if [catch {set md5num [md5sum "$item"]} result] {
      puts stderr "***Warning: Could not md5sum $item: $result"
      continue
    }
    if [catch {set sha1num [sha1sum "$item"]} result] {
      puts stderr "***Warning: Could not sha1sum $item: $result"
      continue
    }
    if [catch {set ripenum [rmd160sum "$item"]} result] {
      puts stderr "***Warning: Could not rmd160sum $item: $result"
      continue
    }
    #
    # We were able to get what we need and this is a file to track, so send
    # the data down the pipe.
    #
    incr counter 1
    catch {set type [file type $item]}
    set perms [fileModeType $fstat(mode) $type]
    set attrs [file attributes $item]
    set user [lindex $attrs 3]
    set grp [lindex $attrs 1]
    set ctime [clock format $fstat(ctime) -format "%Y/%m/%d-%H:%M:%S"]
    set outstr1 [format "%s|%s|%s|%s|%d|%s|%s|%s|%s|%s" \
               $hostnm $item $user $grp $fstat(size) \
	       $perms $ctime $md5num $sha1num $ripenum]
    if {$FIDO_ENCRYPT != 0} {
      set outstr [dbencrypt $outstr1 $fido_size $password]
    } else {
      set outstr $outstr1
    }
    puts $sock "$outstr"
    puts $host_db "$outstr1"
  }
}

#
# Finish off and close the socket.
#
if {$FIDO_ENCRYPT != 0} {
  set outstr [dbencrypt "**END**" $fido_size $password]
} else {
  set outstr "**END**"
}
puts $sock $outstr

#
# Clean up.
#
if {$host_db != "stdout"} {
  catch {close $host_db}
}
close $sock

puts stderr "Finally processed $counter files"

set clock2 [ dbtime ]
set nowTime [ expr $clock2-$clock1 ]
set thisTime [ format "%6.4f" $nowTime ]

puts stderr ""
puts stderr "Finished fido run in $thisTime seconds"
set thisTime [format "%6.4f" $time_stats]

#
# Hasta la vista, baby.
#
exit 0

